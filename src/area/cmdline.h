/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "Area"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "Area"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * inprefix_arg;	/**< @brief Prefix of the filenames of input tiles (default='tile').  */
  char * inprefix_orig;	/**< @brief Prefix of the filenames of input tiles original value given at command line.  */
  const char *inprefix_help; /**< @brief Prefix of the filenames of input tiles help description.  */
  char * outprefix_arg;	/**< @brief Prefix of the filenames for the output tiles (default='out').  */
  char * outprefix_orig;	/**< @brief Prefix of the filenames for the output tiles original value given at command line.  */
  const char *outprefix_help; /**< @brief Prefix of the filenames for the output tiles help description.  */
  char * intype_arg;	/**< @brief filetype of the input tiles (default='pgm').  */
  char * intype_orig;	/**< @brief filetype of the input tiles original value given at command line.  */
  const char *intype_help; /**< @brief filetype of the input tiles help description.  */
  char * outtype_arg;	/**< @brief filetype of the output tiles.  */
  char * outtype_orig;	/**< @brief filetype of the output tiles original value given at command line.  */
  const char *outtype_help; /**< @brief filetype of the output tiles help description.  */
  char * dataset_arg;	/**< @brief Name of the dataset if using HDF5 files.  */
  char * dataset_orig;	/**< @brief Name of the dataset if using HDF5 files original value given at command line.  */
  const char *dataset_help; /**< @brief Name of the dataset if using HDF5 files help description.  */
  int* grid_arg;	/**< @brief Number of tiles horizontally and vertically, comma separated.  */
  char ** grid_orig;	/**< @brief Number of tiles horizontally and vertically, comma separated original value given at command line.  */
  unsigned int grid_min; /**< @brief Number of tiles horizontally and vertically, comma separated's minimum occurreces */
  unsigned int grid_max; /**< @brief Number of tiles horizontally and vertically, comma separated's maximum occurreces */
  const char *grid_help; /**< @brief Number of tiles horizontally and vertically, comma separated help description.  */
  int bitsperpixel_arg;	/**< @brief Define the dynamic range (mainly for HDF5) (default='8').  */
  char * bitsperpixel_orig;	/**< @brief Define the dynamic range (mainly for HDF5) original value given at command line.  */
  const char *bitsperpixel_help; /**< @brief Define the dynamic range (mainly for HDF5) help description.  */
  int flood_arg;	/**< @brief Choose the used flooding technique (0: Salembier, 1: Wilkinson). Default is 1 for >8 bits images, 0 for <= 8 bits images (default='0').  */
  char * flood_orig;	/**< @brief Choose the used flooding technique (0: Salembier, 1: Wilkinson). Default is 1 for >8 bits images, 0 for <= 8 bits images original value given at command line.  */
  const char *flood_help; /**< @brief Choose the used flooding technique (0: Salembier, 1: Wilkinson). Default is 1 for >8 bits images, 0 for <= 8 bits images help description.  */
  char * filter_arg;	/**< @brief Choose the used filter (default='area').  */
  char * filter_orig;	/**< @brief Choose the used filter original value given at command line.  */
  const char *filter_help; /**< @brief Choose the used filter help description.  */
  long lambda_arg;	/**< @brief Lambda value (default='100').  */
  char * lambda_orig;	/**< @brief Lambda value original value given at command line.  */
  const char *lambda_help; /**< @brief Lambda value help description.  */
  char * verbosity_arg;	/**< @brief Add verbose output (default='WARN').  */
  char * verbosity_orig;	/**< @brief Add verbose output original value given at command line.  */
  const char *verbosity_help; /**< @brief Add verbose output help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int inprefix_given ;	/**< @brief Whether inprefix was given.  */
  unsigned int outprefix_given ;	/**< @brief Whether outprefix was given.  */
  unsigned int intype_given ;	/**< @brief Whether intype was given.  */
  unsigned int outtype_given ;	/**< @brief Whether outtype was given.  */
  unsigned int dataset_given ;	/**< @brief Whether dataset was given.  */
  unsigned int grid_given ;	/**< @brief Whether grid was given.  */
  unsigned int bitsperpixel_given ;	/**< @brief Whether bitsperpixel was given.  */
  unsigned int flood_given ;	/**< @brief Whether flood was given.  */
  unsigned int filter_given ;	/**< @brief Whether filter was given.  */
  unsigned int lambda_given ;	/**< @brief Whether lambda was given.  */
  unsigned int verbosity_given ;	/**< @brief Whether verbosity was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_flood_values[];  /**< @brief Possible values for flood. */
extern const char *cmdline_parser_filter_values[];  /**< @brief Possible values for filter. */
extern const char *cmdline_parser_verbosity_values[];  /**< @brief Possible values for verbosity. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
